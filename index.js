export default async function handler(req, res) {
  console.log("üì• [Scouter] API Hit at:", new Date().toISOString());
  console.log("üì• [Scouter] HTTP Method:", req.method);

  try {
    // ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞ POST
    if (req.method !== "POST") {
      console.warn("‚ö†Ô∏è [Scouter] Method Not Allowed:", req.method);
      return res.status(405).json({
        error: true,
        message: "Method Not Allowed. Use POST only.",
      });
    }

    // ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô body (‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ await req.json())
    let body;
    try {
      body = await req.json();
    } catch (err) {
      console.error("‚ùå [Scouter] Failed to parse JSON body:", err.message);
      return res.status(400).json({
        error: true,
        message: "Invalid JSON format in request body.",
      });
    }

    console.log("üì¶ [Scouter] Incoming Payload:", JSON.stringify(body, null, 2));

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö field ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ
    const { jobID, taskID, requestedAction, payload } = body;

    if (!jobID || !taskID || !requestedAction || !payload) {
      console.warn("‚ö†Ô∏è [Scouter] Missing required fields");
      return res.status(400).json({
        error: true,
        message: "Missing required fields (jobID, taskID, requestedAction, payload).",
      });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ payload ‡∏°‡∏µ researchData ‡∏´‡∏£‡∏∑‡∏≠ productName ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏≠‡∏¢‡πà‡∏≤‡∏á
    if (!payload.productName && !payload.researchData) {
      console.warn("‚ö†Ô∏è [Scouter] Missing researchData or productName");
      return res.status(400).json({
        error: true,
        message: "Payload must include 'researchData' or 'productName'.",
      });
    }

    // ‚úÖ Logic ‡∏´‡∏•‡∏±‡∏Å (‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô mock data ‚Äì ‡∏£‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° SerpAPI/Perplexity)
    const researchData = {
      insights: [
        "‡∏ï‡∏•‡∏≤‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï 12% ‡∏ï‡πà‡∏≠‡∏õ‡∏µ",
        "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏ô‡πÉ‡∏à‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°‡∏à‡∏≤‡∏Å‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥",
        "‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏™‡∏π‡∏á ‡πÅ‡∏ï‡πà‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå",
      ],
      keywords: ["lycopene supplement", "skin health", "antioxidant"],
      competitorBrands: ["Brand A", "Brand B", "Brand C"],
      sourceLinks: [
        { title: "Supplement Market Report 2024", url: "https://example.com/report" },
        { title: "Consumer Behavior Study", url: "https://example.com/behavior" },
      ],
    };

    console.log("‚úÖ [Scouter] Research Completed Successfully");

    // ‚úÖ ‡∏™‡πà‡∏á Response
    return res.status(200).json({
      success: true,
      agentName: "Scouter",
      timestamp: new Date().toISOString(),
      jobID,
      taskID,
      requestedAction,
      researchData,
    });
  } catch (error) {
    console.error("‚ùå [Scouter] Fatal Error:", error);
    return res.status(500).json({
      error: true,
      message: error.message || "Internal Server Error",
    });
  }
}
